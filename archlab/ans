You must read "archlab.pdf" at first, then you can understand the following.
Part A:
sum_list: ./misc/sum.ys
	result:
	Stopped in 26 steps at PC = 0x13.  Status 'HLT', CC Z=1 S=0 O=0
	Changes to registers:
	%rax:	0x0000000000000000	0x0000000000000cba
	%rsp:	0x0000000000000000	0x0000000000000200
	%r8:	0x0000000000000000	0x0000000000000c00

rsum_list: ./misc/rsum.ys
	result:
	Stopped in 38 steps at PC = 0x13.  Status 'HLT', CC Z=0 S=0 O=0
	Changes to registers:
	%rax:	0x0000000000000000	0x0000000000000cba
	%rsp:	0x0000000000000000	0x0000000000000200

copy_block: ./misc/copy.ys
	result:
	Stopped in 36 steps at PC = 0x13.  Status 'HLT', CC Z=1 S=0 O=0
	Changes to registers:
	%rax:	0x0000000000000000	0x0000000000000cba
	%rsp:	0x0000000000000000	0x0000000000000200
	%rsi:	0x0000000000000000	0x0000000000000048
	%rdi:	0x0000000000000000	0x0000000000000030
	%r8:	0x0000000000000000	0x0000000000000008
	%r9:	0x0000000000000000	0x0000000000000001
	%r10:	0x0000000000000000	0x0000000000000c00

	Changes to memory:
	0x0030:	0x0000000000000111	0x000000000000000a
	0x0038:	0x0000000000000222	0x00000000000000b0
	0x0040:	0x0000000000000333	0x0000000000000c00
	0x01f0:	0x0000000000000000	0x000000000000006f
	0x01f8:	0x0000000000000000	0x0000000000000013


Part B: 
iaddq V,rB: ./sim/seq/seq-full.hcl
|C|0|F|rB|  V  |(10Byte)
fetch:
	icode:ifun <-- M1[PC]
	rA:rB <-- M1[PC+1]
	valC <-- M8[PC+2]
	valP <-- PC+10
decode:
	valB <-- R[rB]
excute:
	valE <-- valB + valC
Memory:
Write back:
	R[rB] <-- valE
PC update:
	PC <-- valP
result:
32 instructions executed
Status = HLT
	Condition Codes: Z=1 S=0 O=0
	Changed Register State:
	%rax:	0x0000000000000000	0x0000abcdabcdabcd
	%rsp:	0x0000000000000000	0x0000000000000100
	%rdi:	0x0000000000000000	0x0000000000000038
	%r10:	0x0000000000000000	0x0000a000a000a000
	Changed Memory State:
	0x00f0:	0x0000000000000000	0x0000000000000055
	0x00f8:	0x0000000000000000	0x0000000000000013
	ISA Check Succeeds

	./optest.pl -s ../seq/ssim -i
	Simulating with ../seq/ssim
	  All 58 ISA Checks Succeed
	./jtest.pl -s ../seq/ssim -i
	Simulating with ../seq/ssim
	  All 96 ISA Checks Succeed
	./ctest.pl -s ../seq/ssim -i
	Simulating with ../seq/ssim
	  All 22 ISA Checks Succeed
	./htest.pl -s ../seq/ssim -i
	Simulating with ../seq/ssim
	  All 756 ISA Checks Succeed

	
Part C:	./sim/pipe/pipe-full.hcl  ./sim/pipe/ncopy.ys
	result:
	61	381	6.25
	62	389	6.27
	63	400	6.35
	64	407	6.36
	Average CPE	7.69
	Score	56.2/60.0
	
	how to reach 60 scores? ./sim/pipe/ncopy2.ys
	I use cmovg instead of jle when cout the positive vals, but the ans is worse.
	because the former have to xorq R to store 0 and add 0,however the latter don't need.
	61	426	6.98
	62	424	6.84
	63	431	6.84
	64	440	6.88
	Average CPE	8.29
	Score	44.2/60.0


	so, how to improve?
	
	





	


