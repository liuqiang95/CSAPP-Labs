#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
# 
#1. using IADDQ to reduce instructions, len-- become len -= 10
#   using %rcx, %rbx, %rbp, %8-14
#2. loop unrolling; 
#   mrmovq (%rdi), %r8	# read val from src...  
#   bubble --> another instruction
#   rmmovq %r8, (%rsi)	# ...and store it to dst
#   using another instruction to replace the bubble between above two instructions.
#   if len >= 10, unroll to 10X1, else unroll to 3X1. 
#   And why 3X1, I think 9 can unroll to 3 loop, it is not too large, not too small.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-10, %rdx	
	jl Nops1		# if len<10, goto Nops1:
L1:	
	mrmovq (%rdi), %rcx	# read 10 vals from src...
	mrmovq 8(%rdi), %rbx	
	mrmovq 16(%rdi), %rbp	
	mrmovq 24(%rdi), %r8
	mrmovq 32(%rdi), %r9
	mrmovq 40(%rdi), %r10
	mrmovq 48(%rdi), %r11
	mrmovq 56(%rdi), %r12
	mrmovq 64(%rdi), %r13
	mrmovq 72(%rdi), %r14
	rmmovq %rcx, (%rsi)	# ...and store 10 vals to dst
	rmmovq %rbx, 8(%rsi)
	rmmovq %rbp, 16(%rsi)
	rmmovq %r8, 24(%rsi)	
	rmmovq %r9, 32(%rsi)
	rmmovq %r10, 40(%rsi)
	rmmovq %r11, 48(%rsi)
	rmmovq %r12, 56(%rsi)
	rmmovq %r13, 64(%rsi)
	rmmovq %r14, 72(%rsi)
	andq %rcx, %rcx		# val <= 0?
	jle N9			# if so, goto Npos:
	iaddq $1, %rax		# count++
N9:	
	andq %rbx, %rbx		# val <= 0?
	jle N8			# if so, goto Npos:
	iaddq $1, %rax		# count++
N8:	
	andq %rbp, %rbp		# val <= 0?
	jle N7			# if so, goto Npos:
	iaddq $1, %rax		# count++
N7:	
	andq %r8, %r8		# val <= 0?
	jle N6			# if so, goto Npos:
	iaddq $1, %rax		# count++
N6:	
	andq %r9, %r9		# val <= 0?
	jle N5			# if so, goto Npos:
	iaddq $1, %rax		# count++
N5:	
	andq %r10, %r10		# val <= 0?
	jle N4			# if so, goto Npos:
	iaddq $1, %rax		# count++
N4:	
	andq %r11, %r11		# val <= 0?
	jle N3			# if so, goto Npos:
	iaddq $1, %rax		# count++
N3:	
	andq %r12, %r12		# val <= 0?
	jle N2			# if so, goto Npos:
	iaddq $1, %rax		# count++
N2:	
	andq %r13, %r13		# val <= 0?
	jle N1			# if so, goto Npos:
	iaddq $1, %rax		# count++
N1:	
	andq %r14, %r14		# val <= 0?
	jle N0			# if so, goto Npos:
	iaddq $1, %rax		# count++	
N0:
	iaddq $80, %rdi		# src += 10
	iaddq $80, %rsi		# dst += 10
	iaddq $-10, %rdx	# len -= 10			
	jge L1			# if len>=10, goto L1
Nops1:
	iaddq $7, %rdx		
	jl Nops2		# if len<3, goto Nops2:
L2:	
	mrmovq (%rdi), %rcx	# read 3 vals from src...
	mrmovq 8(%rdi), %rbx
	mrmovq 16(%rdi), %rbp	
	rmmovq %rcx, (%rsi)	# ...and store 3 vals to dst
	rmmovq %rbx, 8(%rsi)
	rmmovq %rbp, 16(%rsi)	
	andq %rcx, %rcx		# val <= 0?
	jle N10			# if so, goto N10:
	iaddq $1, %rax		# count++
N10:
	andq %rbx, %rbx		# val <= 0?
	jle N11			# if so, goto Npos:
	iaddq $1, %rax		# count++
N11:	
	andq %rbp, %rbp		# val <= 0?
	jle N12			# if so, goto Npos:
	iaddq $1, %rax		# count++
N12:	
	iaddq $24, %rdi		# src += 3
	iaddq $24, %rsi		# dst += 3
	iaddq $-3, %rdx		# len -= 3
	jge L2			# if len>=3, goto L2:
Nops2:	
	iaddq $2, %rdx
	jge L3			# if len == 0, ret
	ret
L3:	
	je L4			# if len == 1, goto L4
	mrmovq (%rdi), %rcx	# read 2 vals from src...
	mrmovq 8(%rdi), %rbx
	rmmovq %rcx, (%rsi)	# ...and store 2 vals to dst
	rmmovq %rbx, 8(%rsi)
	andq %rcx, %rcx		# val <= 0?
	jle N13			# if so, goto N10:
	iaddq $1, %rax		# count++
N13:
	andq %rbx, %rbx		# val <= 0?
	jle Done		# if so, goto Done:
	iaddq $1, %rax		# count++
	ret
L4:
	mrmovq (%rdi), %rcx	# read 1 val from src...
	rmmovq %rcx, (%rsi)	# ...and store 1 val to dst
	andq %rcx, %rcx		# val <= 0?
	jle Done		# if so, goto N10:
	iaddq $1, %rax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
# 
#1. using IADDQ to reduce instructions, len-- become len -= 10
#   using %rcx, %rbx, %rbp, %8-14
#2. loop unrolling; 
#   mrmovq (%rdi), %r8	# read val from src...  
#   bubble --> another instruction
#   rmmovq %r8, (%rsi)	# ...and store it to dst
#   using another instruction to replace the bubble between above two instructions.
#   if len >= 10, unroll to 10X1, else unroll to 3X1. 
#   And why 3X1, I think 9 can unroll to 3 loop, it is not too large, not too small.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	irmovq $1, %r13	
	xorq %rax,%rax		# count = 0;
	iaddq $-8, %rdx	
	jl Nops1		# if len<8, goto Nops1:
L1:	
	mrmovq (%rdi), %rcx	# read 8 vals from src...
	mrmovq 8(%rdi), %rbx	
	mrmovq 16(%rdi), %rbp	
	mrmovq 24(%rdi), %r8
	mrmovq 32(%rdi), %r9
	mrmovq 40(%rdi), %r10
	mrmovq 48(%rdi), %r11
	mrmovq 56(%rdi), %r12
	rmmovq %rcx, (%rsi)	# ...and store 10 vals to dst
	rmmovq %rbx, 8(%rsi)
	rmmovq %rbp, 16(%rsi)
	rmmovq %r8, 24(%rsi)	
	rmmovq %r9, 32(%rsi)
	rmmovq %r10, 40(%rsi)
	rmmovq %r11, 48(%rsi)
	rmmovq %r12, 56(%rsi)
	xorq %r14, %r14
	andq %rcx, %rcx		# val > 0?
	cmovg %r13, %r14 
	addq %r14, %rax		# count++

	xorq %r14, %r14
	andq %rbx, %rbx		# val > 0?
	cmovg %r13, %r14 
	addq %r14, %rax		# count++

	xorq %r14, %r14
	andq %rbp, %rbp		# val > 0?
	cmovg %r13, %r14 
	addq %r14, %rax		# count++

	xorq %r14, %r14
	andq %r8, %r8		# val > 0?
	cmovg %r13, %r14 
	addq %r14, %rax		# count++

	xorq %r14, %r14
	andq %r9, %r9		# val > 0?
	cmovg %r13, %r14 
	addq %r14, %rax		# count++

	xorq %r14, %r14
	andq %r10, %r10		# val > 0?
	cmovg %r13, %r14 
	addq %r14, %rax		# count++

	xorq %r14, %r14
	andq %r11, %r11		# val > 0?
	cmovg %r13, %r14 
	addq %r14, %rax		# count++

	xorq %r14, %r14
	andq %r12, %r12		# val > 0?
	cmovg %r13, %r14 
	addq %r14, %rax		# count++

	
	iaddq $64, %rdi		# src += 10
	iaddq $64, %rsi		# dst += 10
	iaddq $-8, %rdx		# len -= 10			
	jge L1			# if len>=10, goto L1
Nops1:
	iaddq $5, %rdx		
	jl Nops2		# if len<3, goto Nops2:
L2:	
	mrmovq (%rdi), %rcx	# read 3 vals from src...
	mrmovq 8(%rdi), %rbx
	mrmovq 16(%rdi), %rbp	
	rmmovq %rcx, (%rsi)	# ...and store 3 vals to dst
	rmmovq %rbx, 8(%rsi)
	rmmovq %rbp, 16(%rsi)	
	andq %rcx, %rcx		# val <= 0?
	jle N10			# if so, goto N10:
	iaddq $1, %rax		# count++
N10:
	andq %rbx, %rbx		# val <= 0?
	jle N11			
	iaddq $1, %rax		# count++
N11:	
	andq %rbp, %rbp		# val <= 0?
	jle N12			
	iaddq $1, %rax		# count++
N12:	
	iaddq $24, %rdi		# src += 3
	iaddq $24, %rsi		# dst += 3
	iaddq $-3, %rdx		# len -= 3
	jge L2			# if len>=3, goto L2:
Nops2:	
	iaddq $2, %rdx
	jge L3			# if len == 0, ret
	ret
L3:	
	je L4			# if len == 1, goto L4
	mrmovq (%rdi), %rcx	# read 2 vals from src...
	mrmovq 8(%rdi), %rbx
	rmmovq %rcx, (%rsi)	# ...and store 2 vals to dst
	rmmovq %rbx, 8(%rsi)
	andq %rcx, %rcx		# val <= 0?
	jle N13			# if so, goto N10:
	iaddq $1, %rax		# count++
N13:
	andq %rbx, %rbx		# val <= 0?
	jle Done		# if so, goto Done:
	iaddq $1, %rax		# count++
	ret
L4:
	mrmovq (%rdi), %rcx	# read 1 val from src...
	rmmovq %rcx, (%rsi)	# ...and store 1 val to dst
	irmovq $1, %r8
	xorq %r9, %r9
	andq %rcx, %rcx		# val > 0?
	cmovg %r8, %r9 
	addq %r9, %rax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
